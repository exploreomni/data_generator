# to be run independently of the framework
import requests
from pydash import get
import json, csv
from dotenv import load_dotenv

load_dotenv()
import os

imdb_ids = [
    # "tt5071412",
    # "tt0111161",
    # "tt0068646",
    # "tt0468569",
    # "tt0071562",
    # "tt0050083",
    # "tt0108052",
    # "tt0167260",
    # "tt0110912",
    # "tt0120737",
    # "tt0060196",
    # "tt0109830",
    # "tt0137523",
    # "tt0167261",
    # "tt1375666",
    # "tt0080684",
    # "tt0133093",
    # "tt0099685",
    # "tt0073486",
    # "tt0114369",
    # "tt0038650",
    # "tt0047478",
    # "tt0102926",
    # "tt0120815",
    # "tt0317248",
    # "tt0816692",
    # "tt0118799",
    # "tt0120689",
    # "tt0076759",
    # "tt0103064",
    # "tt0088763",
    # "tt0245429",
    # "tt0253474",
    # "tt0054215",
    # "tt6751668",
    # "tt0110413",
    # "tt0110357",
    # "tt0172495",
    # "tt0120586",
    # "tt0407887",
    # "tt2582802",
    # "tt0482571",
    # "tt0114814",
    ## not fetched ## "tt0034583",
    ## not fetched ## "tt0095327",
    ## not fetched ## "tt0056058",
    ## not fetched ## "tt1675434",
    ## not fetched ## "tt0027977",
    ## not fetched ## "tt0064116",
    ## not fetched ## "tt0095765",
    ## not fetched ## "tt0047396",
    ## not fetched ## "tt0078748",
    ## not fetched ## "tt0021749",
    ## not fetched ## "tt0078788",
    ## not fetched ## "tt0209144",
    ## not fetched ## "tt1853728",
    ## not fetched ## "tt0082971",
    "tt0910970",
    ## not fetched ## "tt0405094",
    "tt0043014",
    "tt0050825",
    "tt0081505",
    "tt0032553",
    "tt4154756",
    "tt0051201",
    "tt0090605",
    "tt4633694",
    "tt0169547",
    "tt0057012",
    "tt1345836",
    "tt0361748",
    "tt0364569",
    "tt0086879",
    "tt2380307",
    "tt0114709",
    "tt0112573",
    "tt7286456",
    "tt0082096",
    "tt4154796",
    "tt0119698",
    "tt0119217",
    "tt0087843",
    "tt5311514",
    "tt0045152",
    "tt1187043",
    "tt0180093",
    "tt0057565",
    "tt0435761",
    "tt8267604",
    "tt0086190",
    "tt0062622",
    "tt0338013",
    "tt0091251",
    "tt0105236",
    "tt2106476",
    "tt0056172",
    "tt0033467",
    "tt0022100",
    "tt0044741",
    "tt0053125",
    "tt0053604",
    "tt0052357",
    "tt0211915",
    "tt0036775",
    "tt0066921",
    "tt0093058",
    "tt0086250",
    "tt8503618",
    "tt1255953",
    "tt0113277",
    "tt1049413",
    "tt0056592",
    "tt0070735",
    "tt1832382",
    "tt0017136",
    "tt0119488",
    "tt0095016",
    "tt0075314",
    "tt0097576",
    "tt0208092",
    "tt0040522",
    "tt0986264",
    "tt8579674",
    "tt1745960",
    "tt0363163",
    "tt5074352",
    "tt0059578",
    "tt0372784",
    "tt0012349",
    "tt0053291",
    "tt10272386",
    "tt0042192",
    "tt0993846",
    "tt6966692",
    "tt0055031",
    "tt0089881",
    "tt0112641",
    "tt0120382",
    "tt0469494",
    "tt0457430",
    "tt0105695",
    "tt0167404",
    "tt1130884",
    "tt0268978",
    "tt0107290",
    "tt0055630",
    "tt0040897",
    "tt0071853",
    "tt0477348",
    "tt0266697",
    "tt0057115",
    "tt0042876",
    "tt0084787",
    "tt0266543",
    "tt10872600",
    "tt0080678",
    "tt0071315",
    "tt0434409",
    "tt0081398",
    "tt0031381",
    "tt0046912",
    "tt0120735",
    "tt2096673",
    "tt0347149",
    "tt1305806",
    "tt5027774",
    "tt0117951",
    "tt0050212",
    "tt1392214",
    "tt1291584",
    "tt0116282",
    "tt1205489",
    "tt0264464",
    "tt0096283",
    "tt0405159",
    "tt0118849",
    "tt0083658",
    "tt0015864",
    "tt4729430",
    "tt1201607",
    "tt0112471",
    "tt2024544",
    "tt0052618",
    "tt2278388",
    "tt0047296",
    "tt2267998",
    "tt0050986",
    "tt10366206",
    "tt0017925",
    "tt0072684",
    "tt0107207",
    "tt0077416",
    "tt2119532",
    "tt0041959",
    "tt0046268",
    "tt0353969",
    "tt3011894",
    "tt0015324",
    "tt0031679",
    "tt1392190",
    "tt0978762",
    "tt0892769",
    "tt0050976",
    "tt0198781",
    "tt0097165",
    "tt0073195",
    "tt3170832",
    "tt0118715",
    "tt0046438",
    "tt0019254",
    "tt1950186",
    "tt0395169",
    "tt0075148",
    "tt0382932",
    "tt0091763",
    "tt1895587",
    "tt3315342",
    "tt0088247",
    "tt0092005",
    "tt1979320",
    "tt0074958",
    "tt0381681",
    "tt0758758",
    "tt0032138",
    "tt0036868",
    "tt0070047",
    "tt0107048",
    "tt0317705",
    "tt0035446",
    "tt0113247",
    "tt0325980",
    "tt1028532",
    "tt0058946",
    "tt0048473",
    "tt0032551",
    "tt0476735",
    "tt0245712",
    "tt15097216",
    "tt0032976",
    "tt4016934",
    "tt0061512",
    "tt0059742",
    "tt0025316",
    "tt0053198",
    "tt0060827",
    "tt0079470",
    "tt0129167",
    "tt1454029",
    "tt0103639",
    "tt0099348",
    "tt0071411",
]
from time import sleep

for imdb_id in imdb_ids:
    sleep(2)
    url = "https://online-movie-database.p.rapidapi.com/title/get-videos"

    querystring = {"tconst": imdb_id, "limit": "5000", "region": "US"}

    headers = {
        "X-RapidAPI-Key": os.environ["IMDB_PROXY_API_KEY"],
        "X-RapidAPI-Host": "online-movie-database.p.rapidapi.com",
    }

    response = requests.request("GET", url, headers=headers, params=querystring)

    data = json.loads(response.text)

    new_data = []
    try:
        for film in get(data, "resource.videos"):
            video = dict(
                title=get(film, "title"),
                id=get(film, "id").split("/")[2],
                duration=get(film, "durationInSeconds"),
                content_type=get(film, "contentType"),
                description=get(film, "description"),
                audio_language=get(film, "audioLanguage"),
                image_url=get(film, "image.url"),
                parenttitle_year=get(film, "parentTitle.year"),
                parenttitle_title=get(film, "parentTitle.title"),
            )
            new_data.append(video)

        with open("lib/data/movies.csv", "a") as f:
            writer = csv.DictWriter(f, fieldnames=video.keys())
            writer.writerows(new_data)
    except:
        print(f"error for {imdb_id}")
